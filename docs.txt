About:
    Chat Room Application is a websocket based server that allows for users to have real-time conversations without latency. This application 
  was built in Python using flask and flask-socketio. With flask-socketio installed that allowed for the application to use websocket as the 
  server. Then HTML5 was used to allow for a user interface using JavaScript event listeners to let users pick a username and join a chatroom 
  session and send messages between them. This program uses a hashmap to keep track of messages sent by users displaying their username and 
  message. It also uses a hashmap to keep track of when a user joins and disconnects from the server displaying that information to everyone 
  within the chatroom. socketio.on and socketio.emit from "web_socket_server" makes all of this possible.

Repository Link:
  https://github.com/DDurant94/Chat-Room-Application

PIP Install:
  (pip install flask flask-socketio)

Questions:

  Our objective is to create a versatile WebSocket Chat Application, that enables users to communicate in real-time. The system should 
  facilitate a seamless user experience by supporting a wide array of operations, including joining chat rooms, sending messages, and handling 
  users. To achieve this goal, we must implement a diverse set of functionalities using WebSocket technology and JavaScript programming techniques.

  Project Requirements:
    WebSocket Setup and Configuration:
      Implement WebSocket connections in the chat application.
      Understand the concept of bi-directional, full-duplex communication.
      Configure WebSocket server and client to establish communication channels.
      Implement Cors Origin to allow communication with front-end applications

    Implementing WebSocket Events and Handlers:
      Implement connection, message, and disconnection events.
      Understand WebSocket event handling and how it differs from traditional HTTP request-response cycles.
      Handle WebSocket events to manage user interactions in the chat application.

    Creating a Chat Room:
      Design and implement a chat room feature where users can join and participate in conversations.
      Create join_room.html to create a room and join to enter the chat

    Real-Time Messaging and Broadcasting (Optional):
      Implement real-time messaging between users in the chat room.
      Implement features like message deletion and editing to enhance user experience.
      Broadcast messages to all users in the chat room when a new message is sent.

    GitHub Repository:
      Create a GitHub repository for the project and commit code regularly.
      Maintain a clean and interactive README.md file in the GitHub repository, providing clear instructions on how to run the application and 
      explanations of its features.
      Include a link to the GitHub repository in the project documentation.


    WebSocket Events and Handlers:
        Use WebSocket events like onopen, onmessage, and onclose to manage user connections and disconnections.
        
      Chat Room Management:
        Create a data structure to store active chat rooms and their participants.

      Real-Time Messaging:
        Use WebSocket's real-time capabilities to send and receive messages instantly.

    GitHub Repository and Version Control:
      Repository Management: 
        Establish a GitHub repository for your project and commit code regularly. Utilize version control to keep track of changes and collaborate 
        effectively with team members if applicable.
      README.md: 
        Maintain a clean and interactive README.md file in your GitHub repository. Provide clear instructions on how to run the application and 
        explanations of its features. Include a link to your GitHub repository in your project documentation.